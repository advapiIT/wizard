@{ Layout = null; }
@model KuiWizardTutorial.Models.RegisterViewModel


<h2>Account Setup</h2>

<div id="divValidator1">
    <div class="form-group">
        @Html.LabelFor(m => m.Email)
        @(Html.Kendo().TextBoxFor(m => m.Email)
              .HtmlAttributes(new { placeholder = "you@domain.com", type = "email", @class = "k-textbox required", data_bind = "value: XXX",@id="email" })
        )
    </div>

    <footer class="col-xs-12 form-group text-right">
        @(Html.Kendo().Button()
              .Name("Next1")
              .Content("Next")
              .HtmlAttributes(new { @class = "k-primary", data_bind = "enabled: isEnabled" })
              .Events(ev => ev.Click("onNextClick")))
    </footer>
</div>

<script type="text/javascript">
    var validationValue = false;
    var kendoValid = $("#divValidator1").kendoValidator({
        validateOnBlur: true,
        rules: {
            remote: function (input) {
                if (input.val() == "" || !input.attr("data-val-remote-url")) {
                    return true;
                }

                if (input.attr("data-val-remote-recieved")) {
                    input.attr("data-val-remote-recieved", "");

                    return !(input.attr("data-val-remote"));
                }

                var url = input.attr("data-val-remote-url");
                var postData = {};
                postData[input.attr("data-val-remote-additionalfields").split(".")[1]] = input.val();

                var validator = this;
                var currentInput = input;
                input.attr("data-val-remote-requested", true);
                $.ajax({
                    url: url,
                    type: "POST",
                    data: JSON.stringify(postData),
                    dataType: "json",
                    traditional: true,
                    async: false,
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        if (data == true) {
                            input.attr("data-val-remote", "");
                            validationValue = true;
                        }
                        else {
                            input.attr("data-val-remote", data);
                            validationValue = false;
                            return false;
                        }
                        input.attr("data-val-remote-recieved", true);
                        validator.validateInput(currentInput);

                    },
                    error: function () {
                        input.attr("data-val-remote-recieved", true);
                        validator.validateInput(currentInput);
                    }
                });
                return validationValue;
            }
        },
        messages: {
            remote: function (input) {
                return input.attr("data-val-remote");
            }
        }
    }).data("kendoValidator");

    var viewModel1 = kendo.observable({
        XXX: null,
        isEnabled: function () {

            var self = this;

            self.get("XXX");

            var x = $("#divValidator1").data("kendoValidator");

            return x.validate();
        }
    });

    kendo.bind($("#divValidator1"), viewModel1);




</script>
